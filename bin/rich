#!/usr/bin/env php
<?php

if (!isset($argv[1])) {
    error(sprintf('Usage: %s <module-name>', $argv[0]));
}

$moduleName = ucfirst((string) $argv[1]);

// Assume the "src" directory is one directory up
$srcDir = sprintf('%s/src', dirname(__DIR__));

if (!is_dir($srcDir)) {
    error(sprintf('[ERROR] Source directory not found at "%s", aborting.', $srcDir));
}

$srcDir = $srcDir.'/'.$moduleName;

$directories = [
    $srcDir.'/Action/Command',
    $srcDir.'/Action/Event',
    $srcDir.'/Action/Handler/Exception',
    $srcDir.'/Action/Input',
    $srcDir.'/Contract/Enum',
    $srcDir.'/Contract/Exception',
    $srcDir.'/Contract/Repository',
    $srcDir.'/Framework/Controller',
    $srcDir.'/Framework/Controller/API',
    $srcDir.'/Framework/Controller/Web',
    $srcDir.'/Exception',
];

foreach ($directories as $directory) {
    if (!is_dir($directory)) {
        mkdir($directory, 0755, true);
    }
}

$files = [
    "{$srcDir}/Contract/Exception/ExceptionInterface.php" => "<?php\n\nnamespace App\\{$moduleName}\\Contract\\Exception;\n\ninterface ExceptionInterface extends \\Throwable\n{\n}",
    "{$srcDir}/Contract/Repository/{$moduleName}RepositoryInterface.php" => "<?php\n\nnamespace App\\{$moduleName}\\Contract\\Repository;\n\nuse App\\Entity\\{$moduleName};\n\ninterface {$moduleName}RepositoryInterface\n{\n}",
    "{$srcDir}/Exception/DomainException.php" => "<?php\n\nnamespace App\\{$moduleName}\\Exception;\n\nuse App\\{$moduleName}\\Contract\\Exception\\ExceptionInterface;\n\nclass DomainException extends \\DomainException implements ExceptionInterface\n{\n}",
    "{$srcDir}/Exception/RuntimeException.php" => "<?php\n\nnamespace App\\{$moduleName}\\Exception;\n\nuse App\\{$moduleName}\\Contract\\Exception\\ExceptionInterface;\n\nclass RuntimeException extends \\RuntimeException implements ExceptionInterface\n{\n}",
];

foreach ($files as $file => $contents) {
    if (!is_file($file) && is_dir(dirname($file))) {
        file_put_contents($file, $contents);
    }
}

function error(string $message): never
{
    fwrite(STDERR, sprintf("%s\n", trim($message)));
    exit(1);
}
